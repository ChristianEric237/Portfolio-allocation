{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Portfolio allocation based on ESG features\n",
    "\n",
    "***\n",
    "$\\rightarrow$ **Definition of the project**\n",
    "\n",
    "The research on sustainable finance has intensified in the past decade. ESG investing has gained a lot of traction and we end by asking if it drives stock performance.\n",
    "\n",
    "On financial time series, we've concluded that the returns and the standardized residuals are defined as white noise, meaning that it's difficult to predict the future values of portfolio returns looking at past values. This postulate creates a mess up in student mind which are used to build a portfolio based on Markovitz theory.\n",
    "We need to review our entire allocation strategy. \n",
    "\n",
    "* Can we build a model to predict the performance of a green stock return looking at its companies attributes (ESG score, Market capitalization, Price-to-Book ratio, 1 month volatility, ...)?\n",
    "* Can we predict the companies that will outperform the crowd?\n",
    "* Can we integrated Machine learning algorithms in trading system?\n",
    "* What're the performance metrics of those strategies compared to a standard benchmark, an equally weighted portfolio?\n",
    "\n",
    "In this report, we synthesize recent academic results and models on socially responsible investing (SRI) in equity markets. The aim of this project is to answer all these questions by creating and managing 3 portfolios with different strategies allocation: the CAC40 as a benchmark, a cap weighted portfolio and a Machine learning ESG allocation portfolio.\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data preprocessing\n",
    "\n",
    "The dataset consists of monthly financial information from February 28th, 2014 to February 26th, 2021 pertaining to 328 stocks around the globe. Each stock are characterized by their:\n",
    "\n",
    "- Closing price (**Close**): Asset's price of a company at the last trading day of the month \n",
    "- Past 1 month volatility (**Vol_1M**): measure of dispersion of the returns of the company extracted from daily/weekly returns of the last month (expressed in percentage)\n",
    "- Market capitalization in M$ (**Mkt_Cap**): is the market value of a publicly traded company's outstanding shares \n",
    "- Price-to-book ratio (**P2B**): is a ratio used to compare a company's current market value to its book value\n",
    "- Debt-to-equity (**D2E**): is a ratio indicating the relative proportion of shareholders' equity and debt used to finance a company's assets\n",
    "- ESG score (**ESG_rank**): is an ESG ranking from *Sustainalytics* "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "                                                        # Install library xgboost and missingno\n",
    "#!pip install xgboost                                    \n",
    "#!pip install missingno       \n",
    "\n",
    "import pandas as pd                                     # Data manipulation and analysis\n",
    "import numpy as np                                      # Operate mathematical functions multi-dimensional \n",
    "import xgboost as xgb                                   # Boosted trees regression\n",
    "import matplotlib.pyplot as plt                         # Creating static, animated, and interactive visualizations\n",
    "import missingno as msno                                # Handle missing variables\n",
    "import statsmodels.api as sm                            # Estimation of different statistical models (regression analysis)\n",
    "import seaborn as sns                                   # Data visualization\n",
    "import yfinance as yf                                   # Import Yahoo finance Tickers data (Close, Volume, ...)\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler        # Scale data with 0 mean and 1 standard deviation\n",
    "from sklearn.pipeline import make_pipeline              # Construct a Pipeline from the given estimators \n",
    "from sklearn.linear_model import SGDRegressor           # SGDRegressor \n",
    "from sklearn.metrics import r2_score                    # Evaluate the prediction performance of the OLS regression model\n",
    "from xgboost import XGBRegressor                        # XGBoosted regression\n",
    "from sklearn.model_selection import cross_val_score     # Evaluate the model\n",
    "from sklearn.model_selection import RepeatedKFold       # Controls the randomness of each repeated cross-validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Tick</th>\n",
       "      <th>Close</th>\n",
       "      <th>Vol_1M</th>\n",
       "      <th>Mkt_Cap</th>\n",
       "      <th>P2B</th>\n",
       "      <th>D2E</th>\n",
       "      <th>ESG_rank</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28/02/2014</th>\n",
       "      <td>A</td>\n",
       "      <td>38.1199</td>\n",
       "      <td>36.355</td>\n",
       "      <td>19014.6200</td>\n",
       "      <td>2.3387</td>\n",
       "      <td>49.4768</td>\n",
       "      <td>88.5057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31/03/2014</th>\n",
       "      <td>A</td>\n",
       "      <td>37.4436</td>\n",
       "      <td>20.190</td>\n",
       "      <td>18644.8762</td>\n",
       "      <td>2.2972</td>\n",
       "      <td>49.4768</td>\n",
       "      <td>88.5057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30/04/2014</th>\n",
       "      <td>A</td>\n",
       "      <td>36.2724</td>\n",
       "      <td>20.976</td>\n",
       "      <td>18018.0456</td>\n",
       "      <td>2.1469</td>\n",
       "      <td>47.8415</td>\n",
       "      <td>88.5057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30/05/2014</th>\n",
       "      <td>A</td>\n",
       "      <td>38.2189</td>\n",
       "      <td>17.087</td>\n",
       "      <td>18984.9651</td>\n",
       "      <td>2.2622</td>\n",
       "      <td>47.8415</td>\n",
       "      <td>87.6404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30/06/2014</th>\n",
       "      <td>A</td>\n",
       "      <td>38.6427</td>\n",
       "      <td>13.029</td>\n",
       "      <td>19142.5058</td>\n",
       "      <td>2.2872</td>\n",
       "      <td>47.8415</td>\n",
       "      <td>87.2093</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Tick    Close  Vol_1M     Mkt_Cap     P2B      D2E  ESG_rank\n",
       "Date                                                                   \n",
       "28/02/2014    A  38.1199  36.355  19014.6200  2.3387  49.4768   88.5057\n",
       "31/03/2014    A  37.4436  20.190  18644.8762  2.2972  49.4768   88.5057\n",
       "30/04/2014    A  36.2724  20.976  18018.0456  2.1469  47.8415   88.5057\n",
       "30/05/2014    A  38.2189  17.087  18984.9651  2.2622  47.8415   87.6404\n",
       "30/06/2014    A  38.6427  13.029  19142.5058  2.2872  47.8415   87.2093"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_esg = pd.read_csv('data_esg.csv')                   # Read the CSV file\n",
    "data_esg.set_index(\"Date\", inplace = True)               # Set Date column as index\n",
    "data_esg.head()                                          # Display first rows"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Missing data & imputation\n",
    "\n",
    "The first step of the study is to process the data. This step is **crucial in portfolio building with machine learning**. We need to check if the dataset contains missing points and handle it in a efficient way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1728x720 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "msno.bar(data_esg.iloc[:,1:]);                            # Check for missing data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There's no missing point in the dataset, we can move further to the engineering feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>Vol_1M</th>\n",
       "      <th>Mkt_Cap</th>\n",
       "      <th>P2B</th>\n",
       "      <th>D2E</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>32640.000000</td>\n",
       "      <td>32640.000000</td>\n",
       "      <td>3.264000e+04</td>\n",
       "      <td>32640.000000</td>\n",
       "      <td>32640.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>86.496838</td>\n",
       "      <td>27.059867</td>\n",
       "      <td>4.691767e+04</td>\n",
       "      <td>5.024023</td>\n",
       "      <td>124.191911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>111.535558</td>\n",
       "      <td>17.461444</td>\n",
       "      <td>9.535007e+04</td>\n",
       "      <td>24.261446</td>\n",
       "      <td>204.607540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.627500</td>\n",
       "      <td>1.775000</td>\n",
       "      <td>7.955008e+02</td>\n",
       "      <td>0.215700</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>37.985875</td>\n",
       "      <td>16.976750</td>\n",
       "      <td>1.131557e+04</td>\n",
       "      <td>1.663000</td>\n",
       "      <td>41.427575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>60.661350</td>\n",
       "      <td>22.807500</td>\n",
       "      <td>2.093507e+04</td>\n",
       "      <td>2.780600</td>\n",
       "      <td>77.971450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>100.075025</td>\n",
       "      <td>31.231500</td>\n",
       "      <td>4.356290e+04</td>\n",
       "      <td>5.005175</td>\n",
       "      <td>131.317200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3450.960000</td>\n",
       "      <td>296.520000</td>\n",
       "      <td>2.255969e+06</td>\n",
       "      <td>2256.900000</td>\n",
       "      <td>5926.069000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Close        Vol_1M       Mkt_Cap           P2B           D2E\n",
       "count  32640.000000  32640.000000  3.264000e+04  32640.000000  32640.000000\n",
       "mean      86.496838     27.059867  4.691767e+04      5.024023    124.191911\n",
       "std      111.535558     17.461444  9.535007e+04     24.261446    204.607540\n",
       "min        1.627500      1.775000  7.955008e+02      0.215700      0.000000\n",
       "25%       37.985875     16.976750  1.131557e+04      1.663000     41.427575\n",
       "50%       60.661350     22.807500  2.093507e+04      2.780600     77.971450\n",
       "75%      100.075025     31.231500  4.356290e+04      5.005175    131.317200\n",
       "max     3450.960000    296.520000  2.255969e+06   2256.900000   5926.069000"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_esg.iloc[:,:-1].describe()                                     # Statistics of features columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The **descriptive statistics** of the features highlights a dispersion between the median and both the minimum and maximum (presence of outliers?). For instance, the maximum **P2B** is $75*10^3$ times the median: this is a very huge number. The same observation holds for **D2E**. If these values an errors or due to very small values in the denominator? A low Equity compared to Debt or a low book value compared to market value. Also, there's a huge discrepancies between them, Mkt_Cap $10^6$, Vol_1M $10^2$, D2E and P2B $10^3$. \n",
    "\n",
    "So, we have to rescale the predictors (features) to the ESG range. We choose to work with positive values, but this is without much loss of generality. We scale the 4 variables with the **min-max rescaling**: $\\tilde{x_i}=\\frac{x_i-min(x)}{max(x)-min(x)}$. It's used to make the model training less sensitive to the scale of features and allows it to converge to better weights."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Compute stock Forward return and takeout missing data\n",
    "liste = [data_esg[data_esg['Tick'] == i]['Close'].shift(-1) / data_esg[data_esg['Tick'] == i]['Close'] - 1 \n",
    "         for i in data_esg['Tick'].unique()]\n",
    "\n",
    "data_esg['F_return'] = [liste[i][j] for i in range(len(liste)) for j in range(len(liste[i]))]\n",
    "data_esg.dropna(inplace = True)\n",
    "\n",
    "data_esg.drop(columns = ['Close'], inplace = True)                                   # Drop unnecessary column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data_esg_normal = pd.DataFrame(columns = ['Tick', 'Vol_1M', 'Mkt_Cap', 'P2B', 'D2E','Date']) # Create new dataframe\n",
    "features = ['Vol_1M', 'Mkt_Cap', 'P2B', 'D2E']                                       # Predictors\n",
    "\n",
    "for index in data_esg.index.unique() :\n",
    "    X = data_esg.loc[index][features].reset_index(drop = True)                       # Copy the data at each date\n",
    "    X_norm = 100 * (X - X.min(axis = 0))/(X.max(axis = 0) - X.min(axis = 0))         # Scaled values at each column\n",
    "    X_norm = pd.DataFrame(X_norm,columns = ['Vol_1M', 'Mkt_Cap', 'P2B', 'D2E'])      # Rename columns\n",
    "    X_norm['Date'] = index                                                           # fill Date\n",
    "    X_norm['Tick'] = pd.DataFrame(data_esg.Tick.unique())                            # fill Tick\n",
    "    data_esg_normal = data_esg_normal.append(X_norm)                                 # Append the dataframe\n",
    "data_esg_normal.sort_values(by = ['Date','Tick'], inplace = True)                    # Sort dataframe as the initial one\n",
    "\n",
    "# Add Tick and Vol_1M and ESG_rank columns\n",
    "data_esg_normal['ESG_rank'] = data_esg.reset_index().sort_values(by = ['Date','Tick'])['ESG_rank'].values\n",
    "data_esg_normal['F_return'] = data_esg.reset_index().sort_values(by = ['Date','Tick'])['F_return'].values\n",
    "\n",
    "# Set Date as date format and sort by Tick and Date\n",
    "data_esg_normal.Date = pd.to_datetime(data_esg_normal.Date)                \n",
    "data_esg_normal = data_esg_normal.set_index(\"Date\").sort_values(by = ['Tick', 'Date'])   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Tick</th>\n",
       "      <th>Vol_1M</th>\n",
       "      <th>Mkt_Cap</th>\n",
       "      <th>P2B</th>\n",
       "      <th>D2E</th>\n",
       "      <th>ESG_rank</th>\n",
       "      <th>F_return</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2014-02-28</th>\n",
       "      <td>A</td>\n",
       "      <td>48.096898</td>\n",
       "      <td>3.230435</td>\n",
       "      <td>0.124164</td>\n",
       "      <td>3.072605</td>\n",
       "      <td>88.5057</td>\n",
       "      <td>-0.017741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-03-31</th>\n",
       "      <td>A</td>\n",
       "      <td>35.182877</td>\n",
       "      <td>3.071057</td>\n",
       "      <td>0.092001</td>\n",
       "      <td>1.022726</td>\n",
       "      <td>88.5057</td>\n",
       "      <td>-0.031279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-04-30</th>\n",
       "      <td>A</td>\n",
       "      <td>21.550388</td>\n",
       "      <td>2.759700</td>\n",
       "      <td>0.079335</td>\n",
       "      <td>0.988923</td>\n",
       "      <td>88.5057</td>\n",
       "      <td>0.053663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-05-30</th>\n",
       "      <td>A</td>\n",
       "      <td>17.847185</td>\n",
       "      <td>2.728310</td>\n",
       "      <td>0.080883</td>\n",
       "      <td>0.988923</td>\n",
       "      <td>87.6404</td>\n",
       "      <td>0.011089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-06-30</th>\n",
       "      <td>A</td>\n",
       "      <td>6.454689</td>\n",
       "      <td>2.662557</td>\n",
       "      <td>2.943416</td>\n",
       "      <td>3.185297</td>\n",
       "      <td>87.2093</td>\n",
       "      <td>-0.023502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-30</th>\n",
       "      <td>ZTS</td>\n",
       "      <td>24.687324</td>\n",
       "      <td>3.917895</td>\n",
       "      <td>8.759663</td>\n",
       "      <td>6.517310</td>\n",
       "      <td>37.1179</td>\n",
       "      <td>-0.040041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-30</th>\n",
       "      <td>ZTS</td>\n",
       "      <td>15.980770</td>\n",
       "      <td>4.016374</td>\n",
       "      <td>10.216243</td>\n",
       "      <td>6.517310</td>\n",
       "      <td>36.4407</td>\n",
       "      <td>0.011542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-30</th>\n",
       "      <td>ZTS</td>\n",
       "      <td>17.254963</td>\n",
       "      <td>3.694742</td>\n",
       "      <td>9.394631</td>\n",
       "      <td>7.781975</td>\n",
       "      <td>39.7436</td>\n",
       "      <td>0.031924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-31</th>\n",
       "      <td>ZTS</td>\n",
       "      <td>15.772067</td>\n",
       "      <td>3.418330</td>\n",
       "      <td>8.912742</td>\n",
       "      <td>4.445736</td>\n",
       "      <td>39.1489</td>\n",
       "      <td>-0.066531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-29</th>\n",
       "      <td>ZTS</td>\n",
       "      <td>16.355938</td>\n",
       "      <td>3.206643</td>\n",
       "      <td>8.853520</td>\n",
       "      <td>4.445736</td>\n",
       "      <td>42.1053</td>\n",
       "      <td>0.006418</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32256 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Tick     Vol_1M   Mkt_Cap        P2B       D2E  ESG_rank  F_return\n",
       "Date                                                                         \n",
       "2014-02-28    A  48.096898  3.230435   0.124164  3.072605   88.5057 -0.017741\n",
       "2014-03-31    A  35.182877  3.071057   0.092001  1.022726   88.5057 -0.031279\n",
       "2014-04-30    A  21.550388  2.759700   0.079335  0.988923   88.5057  0.053663\n",
       "2014-05-30    A  17.847185  2.728310   0.080883  0.988923   87.6404  0.011089\n",
       "2014-06-30    A   6.454689  2.662557   2.943416  3.185297   87.2093 -0.023502\n",
       "...         ...        ...       ...        ...       ...       ...       ...\n",
       "2020-09-30  ZTS  24.687324  3.917895   8.759663  6.517310   37.1179 -0.040041\n",
       "2020-10-30  ZTS  15.980770  4.016374  10.216243  6.517310   36.4407  0.011542\n",
       "2020-11-30  ZTS  17.254963  3.694742   9.394631  7.781975   39.7436  0.031924\n",
       "2020-12-31  ZTS  15.772067  3.418330   8.912742  4.445736   39.1489 -0.066531\n",
       "2021-01-29  ZTS  16.355938  3.206643   8.853520  4.445736   42.1053  0.006418\n",
       "\n",
       "[32256 rows x 7 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_esg_normal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### &#8594; Plot distribution of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x1080 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(4, 2, figsize = (10, 15))\n",
    "\n",
    "for i in features:                                                   # Plot the density function of initial and scaled data\n",
    "    sns.histplot(data_esg[i], ax = ax[features.index(i), 0])\n",
    "    sns.histplot(data_esg_normal[i], ax = ax[features.index(i), 1]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Vol_1M</th>\n",
       "      <th>Mkt_Cap</th>\n",
       "      <th>P2B</th>\n",
       "      <th>D2E</th>\n",
       "      <th>ESG_rank</th>\n",
       "      <th>F_return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>32256.000000</td>\n",
       "      <td>32256.000000</td>\n",
       "      <td>32256.000000</td>\n",
       "      <td>32256.000000</td>\n",
       "      <td>32256.000000</td>\n",
       "      <td>32256.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>21.536253</td>\n",
       "      <td>5.198273</td>\n",
       "      <td>4.383443</td>\n",
       "      <td>6.833287</td>\n",
       "      <td>52.925865</td>\n",
       "      <td>0.011041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>15.050129</td>\n",
       "      <td>10.056269</td>\n",
       "      <td>8.105303</td>\n",
       "      <td>10.190901</td>\n",
       "      <td>25.006033</td>\n",
       "      <td>0.084240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.832261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>11.252332</td>\n",
       "      <td>0.981528</td>\n",
       "      <td>0.923069</td>\n",
       "      <td>1.918805</td>\n",
       "      <td>33.333300</td>\n",
       "      <td>-0.032077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>17.995672</td>\n",
       "      <td>2.086956</td>\n",
       "      <td>2.201112</td>\n",
       "      <td>3.923819</td>\n",
       "      <td>54.386000</td>\n",
       "      <td>0.011365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>27.598382</td>\n",
       "      <td>4.807702</td>\n",
       "      <td>4.823552</td>\n",
       "      <td>7.695414</td>\n",
       "      <td>73.174350</td>\n",
       "      <td>0.053391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>2.138416</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Vol_1M       Mkt_Cap           P2B           D2E      ESG_rank  \\\n",
       "count  32256.000000  32256.000000  32256.000000  32256.000000  32256.000000   \n",
       "mean      21.536253      5.198273      4.383443      6.833287     52.925865   \n",
       "std       15.050129     10.056269      8.105303     10.190901     25.006033   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%       11.252332      0.981528      0.923069      1.918805     33.333300   \n",
       "50%       17.995672      2.086956      2.201112      3.923819     54.386000   \n",
       "75%       27.598382      4.807702      4.823552      7.695414     73.174350   \n",
       "max      100.000000    100.000000    100.000000    100.000000    100.000000   \n",
       "\n",
       "           F_return  \n",
       "count  32256.000000  \n",
       "mean       0.011041  \n",
       "std        0.084240  \n",
       "min       -0.832261  \n",
       "25%       -0.032077  \n",
       "50%        0.011365  \n",
       "75%        0.053391  \n",
       "max        2.138416  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_esg_normal.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The distribution of the variables is highly affected by the scaling choice. We can observe that P2B and D2E are highly concentrate around smaller values (due to outliers?) and then have a certain impact on the regression. Although, we still keep it because its particular behavior can explained some patterns observed in the forecasting process. For the rest of the features the scaling seems ok."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Machine Learning and portfolio allocation\n",
    "\n",
    "By definition, a portfolio is a choice of weights that sum to one. To assess realistic strategies, we'll implement three classical portfolio, all based on different strategies most encountered in hedge funds. The weighting scheme follows signals led either by past returns or companies features. Our strategies are the following:\n",
    "\n",
    "* The CAC40 as standard benchmark index\n",
    "* The second one also serves as benchmark is sustainalytics oriented: with the 328 stock of our dataset where ESG rank are provided. Those two benchmarks will help to evaluate the pertinence of our strategy and the gap with market when investors are concerns by sustainable investing.\n",
    "* **XGBoosted trees**: We first screen among all companies, the stocks which are more concerned by the global footprint on their activity, which is reflected in a relative ESG rank above the threshold of 50%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Split dataset into training and test data\n",
    "X = data_esg_normal.copy().reset_index()\n",
    "X.Date = pd.to_datetime(X.Date)\n",
    "X_train = X.loc[X[\"Date\"] <= \"2019-1-31\"]\n",
    "X_test = X.loc[X[\"Date\"] > \"2019-1-31\"]\n",
    "\n",
    "X_train = X_train.set_index(\"Date\").sort_values(by = ['Tick', 'Date'])   \n",
    "X_test = X_test.set_index(\"Date\").sort_values(by = ['Tick', 'Date'])   \n",
    "\n",
    "Y_train = X_train.F_return                                   # Prediction in training sample\n",
    "Y_test = X_test.F_return                                     # Prediction in testing sample\n",
    "\n",
    "X_train.drop(columns = ['Tick', 'F_return'], inplace = True) # Drop non predictors columns\n",
    "X_test.drop(columns = ['Tick', 'F_return'], inplace = True)  # Drop non predictors columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:               F_return   R-squared:                       0.001\n",
      "Model:                            OLS   Adj. R-squared:                  0.001\n",
      "Method:                 Least Squares   F-statistic:                     4.883\n",
      "Date:                Sun, 20 Jun 2021   Prob (F-statistic):           0.000182\n",
      "Time:                        00:48:15   Log-Likelihood:                 28735.\n",
      "No. Observations:               23040   AIC:                        -5.746e+04\n",
      "Df Residuals:                   23034   BIC:                        -5.741e+04\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.0063      0.001      4.917      0.000       0.004       0.009\n",
      "Vol_1M      5.522e-05   3.09e-05      1.789      0.074   -5.29e-06       0.000\n",
      "Mkt_Cap     1.456e-06    4.6e-05      0.032      0.975   -8.87e-05    9.16e-05\n",
      "P2B        -9.963e-05   6.44e-05     -1.548      0.122      -0.000    2.66e-05\n",
      "D2E            0.0002   5.25e-05      4.480      0.000       0.000       0.000\n",
      "ESG_rank    1.468e-05   1.86e-05      0.791      0.429   -2.17e-05    5.11e-05\n",
      "==============================================================================\n",
      "Omnibus:                     1939.471   Durbin-Watson:                   2.157\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            11695.121\n",
      "Skew:                           0.138   Prob(JB):                         0.00\n",
      "Kurtosis:                       6.479   Cond. No.                         174.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "fit = sm.OLS(Y_train, sm.add_constant(X_train)).fit()        # Perform OLS regression\n",
    "print(fit.summary())                                         # Print summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the training scaled dataset of 5 years over 300+ stocks, the regression highlights that the forward relative return can only statistically be explained by the D2E feature. Without enough points to train on, we can't draw a clear pattern of the pratical impact of the ESG score on the stock performance. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SGDRegressor Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train)                                     # Fitting model on training data\n",
    "Xm_train = scaler.transform(X_train)                    # Transform training data\n",
    "Xm_test = scaler.transform(X_test)                      # Apply same transformation to test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('standardscaler', StandardScaler()),\n",
       "                ('sgdregressor', SGDRegressor())])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "est = make_pipeline(StandardScaler(), SGDRegressor())   # Estimate valeues with SGDregressor\n",
    "est.fit(Xm_train,Y_train.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Score: score = 0.00085\n"
     ]
    }
   ],
   "source": [
    "y_pred_train = est.predict(Xm_train)                     # Predictions based on data\n",
    "score = np.absolute(r2_score(Y_train, y_pred_train))     # Training score\n",
    "print('Score: score = {:.5f}' .format(score))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The score of the SGDRegressor model is very low: 2.7 basis point, which means this model doesn't well fitted to the data. We'll switch to XGboosted trees."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### XGboosted trees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
       "             importance_type='gain', interaction_constraints='',\n",
       "             learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
       "             min_child_weight=1, missing=nan, monotone_constraints='()',\n",
       "             n_estimators=100, n_jobs=8, num_parallel_tree=1, random_state=0,\n",
       "             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
       "             tree_method='exact', validate_parameters=1, verbosity=None)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = XGBRegressor()                                  # Initiate the model\n",
    "model.fit(X_train, Y_train.values)                      # Fitted to training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean MAE: 0.05328 (0.00098)\n"
     ]
    }
   ],
   "source": [
    "# define model evaluation method\n",
    "cv = RepeatedKFold(n_splits = 10, n_repeats = 3, random_state = 1)\n",
    "# evaluate model\n",
    "scores = cross_val_score(model, X_train, Y_train.values, scoring='neg_mean_absolute_error', cv = cv, n_jobs = -1)\n",
    "# force scores to be positive\n",
    "scores = np.absolute(scores)\n",
    "print('Mean MAE: %.5f (%.5f)' % (scores.mean(), scores.std()) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean MAE: 0.081 (0.002)\n"
     ]
    }
   ],
   "source": [
    "# evaluate model\n",
    "scores = cross_val_score(model, X_test, Y_test, scoring='neg_mean_absolute_error', cv=cv, n_jobs=-1)\n",
    "# force scores to be positive\n",
    "scores = np.absolute(scores)\n",
    "print('Mean MAE: %.3f (%.3f)' % (scores.mean(), scores.std()) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xgb.plot_importance(model);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The XGBoosted trees ended with a greater score compared to the regression model, meaning that we well fitted to data . The features plot enhances that the ESG rank is the last predictor in term of importance in the model, which is in line with the economic model observed over the study period. A few years ago, the ESG score was mostly used in risk analysis purposes as setting a minimum require level, better understand portfolio risk and how to improve things once they acquire. Recently, countries' regulators have made legal requirements for companies with their ESG and the correlation started to emerge. It’s a legitimate risk factor in the political space and efficiencies in operations. Since we're convinced that ESG drives returns to a degree, even if portfolios managers currently only use it for a secondary analysis. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Weighting the benchmark according to Mkt_Cap\n",
    "data_esg['sum_Mkt_Cap'] = data_esg.groupby('Date').sum()['Mkt_Cap']           # Compute sum of Mkt_Cap\n",
    "data_esg['Cap_weight'] = data_esg['Mkt_Cap'] / data_esg['sum_Mkt_Cap']        # Normalize it to sum 1 at each month\n",
    "data_esg.drop(columns = 'sum_Mkt_Cap', inplace = True)                        # Drop sum column\n",
    "\n",
    "# Compute the benchmark return \n",
    "data_esg['returns'] = data_esg['Cap_weight'] * data_esg['F_return']           # Compute asset returns in portfolio\n",
    "data_esg['Portf_return'] = data_esg.groupby('Date')['returns'].sum()          # Sum monthly returns\n",
    "data_esg.drop(columns = 'returns', inplace = True)                            # Drop returns column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Weighting our portfolio according to ESG\n",
    "data_esg['med_ESG'] = data_esg.groupby('Date')['ESG_rank'].median()\n",
    "data_esg_cond = data_esg[data_esg['ESG_rank'] > data_esg['med_ESG']].copy()\n",
    "data_esg_cond['Sum_cond_Mkt_Cap'] = data_esg_cond.groupby('Date')['Mkt_Cap'].sum()\n",
    "data_esg_cond['Cap_cond_weight'] = data_esg_cond['Mkt_Cap'] / data_esg_cond['Sum_cond_Mkt_Cap']\n",
    "data_esg_cond.drop(columns = ['Sum_cond_Mkt_Cap', 'med_ESG'], inplace = True)\n",
    "\n",
    "# Compute the portfolio return\n",
    "data_esg_cond['returns'] = data_esg_cond['Cap_cond_weight'] * data_esg_cond['F_return']\n",
    "data_esg_cond['Portf_return'] = data_esg_cond.groupby('Date')['returns'].sum()\n",
    "data_esg_cond.drop(columns = 'returns', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "N = len(data_esg.index.unique())\n",
    "\n",
    "# Compute the cumulative return of the benchmark\n",
    "Benchmark = [1] + (1 + data_esg['Portf_return'].iloc[:N].values).tolist()\n",
    "del Benchmark[-1]\n",
    "\n",
    "Benchmark = pd.DataFrame(Benchmark, index = data_esg['Portf_return'].iloc[:N].index, columns = ['Benchmark'])\n",
    "Benchmark = Benchmark.cumprod()\n",
    "\n",
    "# Compute the cumulative return of the portfolio\n",
    "Portf_return = [1] + (1 + data_esg_cond['Portf_return'].iloc[:N].values).tolist()\n",
    "del Portf_return[-1]\n",
    "\n",
    "Portf_return = pd.DataFrame(Portf_return, index = data_esg_cond['Portf_return'].iloc[:N].index, columns = ['Portf_return'])\n",
    "Portf_return = Portf_return.cumprod()\n",
    "\n",
    "# Merge all the data\n",
    "plot_ret = pd.concat([Benchmark, Portf_return], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    }
   ],
   "source": [
    "# Download data from Yahoo finance and compute forward return/cumulative return\n",
    "CAC40 = yf.download(tickers = '^FCHI', start = '2014-02-28', end = '2021-02-28', interval = '1mo') \n",
    "CAC40['F_return'] = CAC40['Close'].shift(-1) / CAC40['Close'] - 1                            \n",
    "CAC40.dropna(inplace = True)\n",
    "\n",
    "CAC_ret = [1] + (1 + CAC40['F_return'].values).tolist()\n",
    "CAC_ret = pd.DataFrame(CAC, index = data_esg_cond['Portf_return'].iloc[:N].index, columns = ['CAC40'])\n",
    "CAC_ret = CAC_ret.cumprod()\n",
    "\n",
    "# Merge all the data\n",
    "plot_ret = pd.concat([Benchmark, Portf_return, CAC_ret], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the evolution of strategies returns\n",
    "fig, ax = plt.subplots(figsize = (15,6))\n",
    "plot_ret.plot(ax = ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Starting with a simpler capitalization weighting scheme and a given threshold $\\simeq 50$ in ESG rankings, we observe a sustainable return in the portfolio horizon compared to both benchmarks. A portfolio which consists of stock with high ESG will perform slightly better than the others. With no huge difference, the question of the allocation process emerges and we need to dig deeper and have a look at the screening / selection intensity with machine learning process in order to gain an additional return compared to a simpler cap weighted system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
